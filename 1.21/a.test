describe "Exercise 1-21."

# Write a program `entab` that replaces strings of blanks by the minimum number
# of tabs and blanks to achieve the same spacing.
# Use the same tab stops as for detab.
# When either a tab or a single blank would suffice to reach a tab stop,
# which should be given preference?

assertion() {
  local input="$1"
  local expected="$(printf "$2" | 1.10/bin/a)"
  local actual=`echo "$input" | 1.21/bin/a | 1.10/bin/a`

  test "$expected" = "$actual"
  printf "$?"
}

it_should_not_entab_seven_blanks() {
  assertion \
    "       " \
    "       "
}

it_should_entab_eight_blanks() {
  assertion \
    "        " \
    "\t"
}

it_should_entab_one_blank_and_one_tab() {
  assertion \
    " \t" \
    "\t"
}

it_should_entab_seven_blanks_after_one_word_char() {
  assertion \
    "*       " \
    "*\t"
}

it_should_not_entab_six_blanks_after_one_word_char() {
  assertion \
    "*      " \
    "*      "
}

it_should_entab_one_blank_after_six_word_chars() {
  assertion \
    "******* " \
    "*******\t"
}

it_should_entab_six_blanks_and_one_tab_after_one_word_char() {
  assertion \
    "*      \t" \
    "*\t"
}
